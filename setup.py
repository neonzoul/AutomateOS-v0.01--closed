#!/usr/bin/env python3
"""
AutomateOS Setup Script

This script helps set up AutomateOS for development or production.
It handles environment configuration, dependency installation, and basic setup.
"""

import os
import sys
import subprocess
import shutil
import secrets
from pathlib import Path

def run_command(command, cwd=None, check=True):
    """Run a shell command and return the result."""
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            cwd=cwd, 
            check=check,
            capture_output=True,
            text=True
        )
        return result
    except subprocess.CalledProcessError as e:
        print(f"[X] Command failed: {command}")
        print(f"Error: {e.stderr}")
        if check:
            sys.exit(1)
        return e

def check_python_version():
    """Check if Python version is 3.9 or higher."""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 9):
        print("[X] Python 3.9 or higher is required")
        print(f"Current version: {version.major}.{version.minor}.{version.micro}")
        sys.exit(1)
    print(f"[OK] Python {version.major}.{version.minor}.{version.micro} detected")

def check_node_version():
    """Check if Node.js is installed and version is 18 or higher."""
    try:
        result = run_command("node --version", check=False)
        if result.returncode != 0:
            print("[X] Node.js is not installed")
            print("Please install Node.js 18 or higher from https://nodejs.org/")
            return False
        
        version_str = result.stdout.strip().lstrip('v')
        major_version = int(version_str.split('.')[0])
        
        if major_version < 18:
            print(f"[X] Node.js 18 or higher is required (found {version_str})")
            return False
        
        print(f"[OK] Node.js {version_str} detected")
        return True
    except Exception as e:
        print(f"[X] Error checking Node.js version: {e}")
        return False

def check_redis():
    """Check if Redis is available."""
    try:
        result = run_command("redis-cli ping", check=False)
        if result.returncode == 0 and "PONG" in result.stdout:
            print("[OK] Redis is running")
            return True
        else:
            print("[!] Redis is not running")
            return False
    except Exception:
        print("[!] Redis is not installed or not running")
        return False

def create_env_file(environment="development"):
    """Create .env file with default configuration."""
    env_path = Path(".env")
    
    
    
    # Generate a secure secret key
    secret_key = secrets.token_urlsafe(32)
    
    env_content = f"""# AutomateOS Environment Configuration
# Generated by setup.py

# Environment
ENVIRONMENT={environment}

# Database
{"DATABASE_URL=sqlite:///./database.db" if environment == "development" else "# DATABASE_URL=postgresql://user:password@host:port/database"}

# Redis
REDIS_URL=redis://localhost:6379/0

# Security
SECRET_KEY={secret_key}
ACCESS_TOKEN_EXPIRE_MINUTES=30

# CORS (adjust for your frontend URL)
{"ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000" if environment == "development" else "# ALLOWED_ORIGINS=https://your-domain.com"}

# Logging
LOG_LEVEL=INFO
"""
    
    with open(env_path, 'w') as f:
        f.write(env_content)
    
    print(f"[OK] Created .env file for {environment} environment")

def setup_python_environment():
    """Set up Python virtual environment and install dependencies."""
    print("\nSetting up Python environment...")
    
    # Create virtual environment if it doesn't exist
    venv_path = Path("venv")
    if not venv_path.exists():
        print("Creating virtual environment...")
        run_command(f"{sys.executable} -m venv venv")
        print("[OK] Virtual environment created")
    else:
        print("[OK] Virtual environment already exists")
    
    # Determine activation script path
    if os.name == 'nt':  # Windows
        activate_script = venv_path / "Scripts" / "activate"
        pip_path = venv_path / "Scripts" / "pip"
    else:  # Unix-like
        activate_script = venv_path / "bin" / "activate"
        pip_path = venv_path / "bin" / "pip"
    
    # Install dependencies
    print("Installing Python dependencies...")
    run_command(f"{pip_path} install --upgrade pip")
    run_command(f"{pip_path} install -r requirements.txt")
    print("[OK] Python dependencies installed")
    
    return activate_script

def setup_frontend():
    """Set up frontend dependencies."""
    print("\nSetting up frontend...")
    
    frontend_path = Path("frontend")
    if not frontend_path.exists():
        print("[X] Frontend directory not found")
        return False
    
    # Install npm dependencies
    print("Installing frontend dependencies...")
    run_command("npm install", cwd=frontend_path)
    print("[OK] Frontend dependencies installed")
    
    # Create frontend .env file
    frontend_env_path = frontend_path / ".env.development"
    if not frontend_env_path.exists():
        with open(frontend_env_path, 'w') as f:
            f.write("VITE_API_BASE_URL=http://localhost:8000\n")
        print("[OK] Created frontend .env.development file")
    
    return True

def initialize_database():
    """Initialize the database."""
    print("\nInitializing database...")
    
    try:
        # Import and run database initialization
        from app.database import create_db_and_tables
        create_db_and_tables()
        print("[OK] Database initialized")
        return True
    except Exception as e:
        print(f"[X] Failed to initialize database: {e}")
        return False

def print_next_steps(environment="development"):
    """Print instructions for next steps."""
    print("\nSetup complete!")
    print("\nNext steps:")
    
    if environment == "development":
        print("\n1. Start Redis (if not already running):")
        if os.name == 'nt':  # Windows
            print("   Download and start Redis from https://redis.io/download")
        else:
            print("   brew install redis && brew services start redis  # macOS")
            print("   sudo apt install redis-server && sudo systemctl start redis  # Ubuntu")
        
        print("\n2. Start the backend server:")
        if os.name == 'nt':  # Windows
            print("   venv\\Scripts\\activate")
        else:
            print("   source venv/bin/activate")
        print("   python start_server.py")
        
        print("\n3. Start the background worker (in a new terminal):")
        if os.name == 'nt':  # Windows
            print("   venv\\Scripts\\activate")
        else:
            print("   source venv/bin/activate")
        print("   python start_worker.py")
        
        print("\n4. Start the frontend (in a new terminal):")
        print("   cd frontend")
        print("   npm run dev")
        
        print("\n5. Open your browser:")
        print("   Frontend: http://localhost:3000")
        print("   API docs: http://localhost:8000/docs")
        print("   Health check: http://localhost:8000/health")
    
    else:  # production
        print("\n1. Review and update the .env file with production values")
        print("2. Set up PostgreSQL database")
        print("3. Set up Redis instance")
        print("4. Build the frontend: cd frontend && npm run build")
        print("5. Start the production server: python start_production.py")
        print("6. Start the worker: python start_worker.py")
    
    print("\nDocumentation:")
    print("   User Guide: USER_GUIDE.md")
    print("   Deployment Guide: DEPLOYMENT_GUIDE.md")
    print("   API Documentation: http://localhost:8000/docs (when server is running)")

def main():
    """Main setup function."""
    print("AutomateOS Setup Script")
    print("=" * 40)
    
    # Check environment argument
    environment = "development"
    if len(sys.argv) > 1:
        if sys.argv[1] in ["development", "production"]:
            environment = sys.argv[1]
        else:
            print("Usage: python setup.py [development|production]")
            sys.exit(1)
    
    print(f"Setting up for {environment} environment\n")
    
    # Check prerequisites
    print("Checking prerequisites...")
    check_python_version()
    
    node_ok = check_node_version()
    if not node_ok and environment == "development":
        print("Node.js is required for frontend development")
        sys.exit(1)
    
    redis_running = check_redis()
    
    # Create environment file
    print(f"\nCreating environment configuration...")
    create_env_file(environment)
    
    # Set up Python environment
    activate_script = setup_python_environment()
    
    # Set up frontend (development only)
    if environment == "development" and node_ok:
        frontend_ok = setup_frontend()
        if not frontend_ok:
            print("[!] Frontend setup failed, but backend should work")
    
    # Initialize database
    if environment == "development":
        db_ok = initialize_database()
        if not db_ok:
            print("[!] Database initialization failed")
            print("You may need to run this manually after starting the server")
    
    # Print next steps
    print_next_steps(environment)
    
    if not redis_running:
        print("\n[!] Warning: Redis is not running. You'll need to start it before running workflows.")

if __name__ == "__main__":
    main()